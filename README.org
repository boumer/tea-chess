* [[https://quernd.github.io/tutorials/tea-chess][A chess-themed tutorial on writing an SPA in Bucklescript-TEA]]

I recently started frontend web development in OCaml by using
[[https://bucklescript.github.io/][Bucklescript]] to compile my code into Javascript. Naturally, a
functional language like OCaml goes well together with the famous [[https://guide.elm-lang.org/architecture/][Elm
architecture]], so I chose to explore the recent [[https://github.com/OvermindDL1/bucklescript-tea][Bucklescript-TEA]]
library. (TEA stands for "The Elm Architecture", obviously.)

OCaml and Bucklescript have recently gained a lot of attention, not
least because of Facebook's [[https://reasonml.github.io/][Reason]] -- an alternative, more
Javascript-like syntax for OCaml. I prefer the traditional OCaml
syntax, but you can use either syntax together with Bucklescript.

Since I was absolutely not interested in implementing yet another [[http://todomvc.com/][Todo
app]], I decided to create an interactive chess board with move
validation (supplied by an external library), drag and drop, move
logging as well as take-backs. I also implemented a game tree
representing alternative moves, by using a functional programming
technique called the [[https://pavpanchekha.com/blog/zippers/huet.html]["zipper"]]. Finally, I added a REST backend (also
in OCaml) for the frontend to talk to.

In this [[https://en.wikipedia.org/wiki/Twelve_Days_of_Christmas]["Twelve Days of Christmas"]] tutorial, I will walk you through
the entire example, with version control snapshots along the way. It
will certainly help if you have a little experience with chess, web
development and functional programming in general or OCaml in
particular, but it is no prerequisite, you can pick up everything you
need on the way.

